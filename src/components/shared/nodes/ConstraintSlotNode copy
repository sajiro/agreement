/* eslint-disable no-param-reassign */
/* eslint-disable @typescript-eslint/no-unused-vars */
import { css, FontWeights, mergeStyleSets } from "@fluentui/react";
import { useTemplateEditStructureNodeManager } from "components/templateEdit/structure/TemplateEditStructureNodeManager";
import customTheme from "helpers/customTheme";
import { IConstraintDisplayMapping } from "models/constraints";
import { INode } from "models/node";
import { ISlotConstraint, ITemplateRevisionSlot } from "models/slot";
import { CSSProperties, useCallback, useEffect, useRef, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "store";
import hash from "object-hash";
import { previewResultActions } from "store/PreviewResultSlice";
import { useGetSlotTranslationsQuery } from "services/slot";
import { getFlatlist } from "helpers/slot";
import { json2QueryString } from "helpers/utils";
import NodeConstraints from "./NodeConstraints";
import NodeHeaderGap from "./NodeHeaderGap";
import NodeHeaderToggle from "./NodeHeaderToggle";
import NodeInput from "./NodeInput";
import NodeRow from "./NodeRow";
import NodeSelectionHandler from "./NodeSelectionHandler";

const styles = mergeStyleSets({
  input: {
    outline: "none",
    border: "none",
    padding: 0,
    background: "transparent",
    fontWeight: FontWeights.semibold,
    fontFamily: "unset",
    fontSize: "unset",
    width: "100%",
  },
  cell: customTheme.nodeCellCss,
  node: customTheme.nodeCell1Css,
  constraints: customTheme.nodeCell2Css,
  tr: customTheme.listRowCss,
  expandBtn: {
    marginLeft: "-10px",
  },
});

type ConstraintSlotNodeProps = {
  node: INode<ITemplateRevisionSlot>;
  isOpen: boolean;
  depth: number;
  isSlotGroup: boolean;
  constraintValuesMapping: IConstraintDisplayMapping;
  setOpen: (state: boolean) => void;
  resize: (height: number, shouldForceUpdate?: boolean) => void;
  positionStyle: CSSProperties;
  templateId: string;
  revisionId: string;
};

function ConstraintSlotNode({
  node,
  isOpen,
  depth,
  isSlotGroup,
  constraintValuesMapping,
  resize,
  setOpen,
  positionStyle,

  templateId,
  revisionId,
}: ConstraintSlotNodeProps) {
  const dispatch = useDispatch();

  const { isLoading, isLocked } = useSelector(
    (state: RootState) => state.templateEdit
  );
  const { nodeTree, updateNodeInfo, toggleNodeOpenState } =
    useTemplateEditStructureNodeManager();
  const nodeRef = useRef<HTMLDivElement>(null);

  const [nameEditingEnabled, setNameEditingEnabled] = useState<boolean>(false);
  const nameEditingToggledRef = useRef<boolean>(false); // Prevent auto focus on empty slot name input field, once user has already provided it

  const contentHash = hash(node.content!);
  const isHeightValid = contentHash === node.contentHash; // Height calculated based on the content
  const slotPosition = isHeightValid ? positionStyle : undefined;
  const elementVisibility: CSSProperties = {
    visibility: isHeightValid ? undefined : "hidden",
  };
  const slotName = isSlotGroup ? node.content!.name : node.content!.partName;

  const [showDot, setShowDot] = useState(false);

  const [queryParams, setQueryParams] = useState("");

  const {
    currentData: slotsData,
    isLoading: slotsLoading,
    isFetching: slotsFetching,
  } = useGetSlotTranslationsQuery({
    templateId,
    revisionId,
    query: queryParams,
  });

  /*  console.log("slotsData +++++++++++++ ", slotsData); */

  const currentConfig = useSelector(
    (state: RootState) => state.templateEditPreview
  );

  /*    const {
     currentData: slotTree,
     isLoading,
     isFetching,
   } = useGetSlotTreeQuery(templateInfo); */

  const setDotLevels = (nodes: any, nodeList: any) => {
    const tmpItems: ISlotConstraint[] = [];
    /*  */

    nodes.constraints.forEach((element: any) => {
      if (currentConfig.context[element.key]) {
        const tmpArr = currentConfig.context[element.key];
        if (element.value.indexOf(tmpArr) >= 0) {
          tmpItems.push(element);
        }
        console.log("bbbbbbbbbbbbbbbbbbbb");
        setShowDot(
          element.value.indexOf(tmpArr) >= 0 &&
            nodes.constraints.length === tmpItems.length &&
            element.operator !== "Exclude"
        );
      } else {
        console.log("ccccccccccccccccccccccc", element);
        setShowDot(
          Object.keys(currentConfig.context).length === 0 &&
            currentConfig.context.constructor === Object &&
            element.operator !== "Exclude"
        );
      }
    });

    Object.entries(nodeList).forEach(([key, value]) => {
      const tmpitem = value as any;
      if (tmpitem) {
        try {
          // console.log(nodes.id, "key", tmpitem.content.parentSlotId);

          if (nodes.parentSlotId === "00000000-0000-0000-0000-000000000000") {
            //
            console.log(
              "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
              nodes
            );
          }
          if (nodes.id === tmpitem.content.parentSlotId) {
            nodes.constraints.forEach((element: any) => {
              /*  console.log(
                nodes,
                "tmpitem.content"  tmpitem.content,
                currentConfig.context[element.key]
              ); */
              // console.log("tmpitem.content", element);
              /* if (currentConfig.context[element.key]) {
                const tmpArr = currentConfig.context[element.key];
                //
                console.log(
                  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
                  tmpArr
                );
              } else {
                console.log(
                  "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
                );
                setShowDot(false);
              } */
              /* if (currentConfig.context[element.key]) {
                const tmpArr = currentConfig.context[element.key];
                if (element.value.indexOf(tmpArr) >= 0) {
                  tmpItems.push(element);
                }
                setShowDot(
                  element.value.indexOf(tmpArr) >= 0 &&
                    node.content!.constraints.length === tmpItems.length &&
                    element.operator !== "Exclude"
                );
              } else {
                setShowDot(
                  Object.keys(currentConfig.context).length === 0 &&
                    currentConfig.context.constructor === Object
                );
              } */
            });

            // console.log(nodes, "tmpitem.content", tmpitem.content);
          }
        } catch (e) {
          console.log((e as Error).message);
          console.log(
            currentConfig.context.constructor === Object,
            "noparent",
            Object.keys(currentConfig.context).length
          );
          /* setShowDot(
            Object.keys(currentConfig.context).length === 0 &&
              currentConfig.context.constructor === Object
          ); */
        }
      }
    });

    // });

    if (nodes.parentSlotId !== "00000000-0000-0000-0000-000000000000") {
      //  console.log("nodeList", nodes);
    }
    return;

    if (nodes.partId === "00000000-0000-0000-0000-000000000000") {
      // loop thru the constraints
    } else {
      // eslint-disable-next-line no-lonely-if
      if (nodes.parentSlotId !== "00000000-0000-0000-0000-000000000000") {
        console.log(
          node.content!,
          " ===========================0000====================",
          nodes
        );

        setShowDot(false);
      } else {
        //
      }
    }

    // setShowDot(obj.parentSlotId !== "00000000-0000-0000-0000-000000000000");
    /*  const tmpSlots = [...obj];

    const setSlots = (item: ITemplateRevisionSlotItem[], level: number) => {
      const slots = [...item];

      slots.forEach((element: ITemplateRevisionSlotItem) => {
        const tmpEl = element;
        tmpEl.level = level;
        tmpEl.isCollapsed = true;
        if (tmpEl.slots.length > 0) {
          setSlots(tmpEl.slots as ITemplateRevisionSlotItem[], level + 1);
        }
      });
    };

    setSlots(tmpSlots, 0);

    return tmpSlots; */
  };

  useEffect(() => {
    if (slotsData && !slotsLoading && !slotsFetching) {
      setQueryParams(json2QueryString(currentConfig.context));

      const filteredSlots = getFlatlist(slotsData, "full");

      const tmpSlots = filteredSlots.some((arr) => node.content!.id === arr.id);
      setShowDot(tmpSlots);
    }

    if (node.content!.constraints.length === 0) {
      // setShowDot(true);
    }

    const tmpItems: ISlotConstraint[] = [];
    //  console.log("@@@@@@@@@@@@@@@@@@@ ", node.content!);

    // setDotLevels(node.content!, nodeTree.nodes);

    /*    if (node.content!.partId === "00000000-0000-0000-0000-000000000000") {
      console.log("element", node.content!);
    } else {
      // eslint-disable-next-line no-lonely-if
      if (
        node.content!.parentSlotId !== "00000000-0000-0000-0000-000000000000"
      ) {
        console.log("0000", node.content!);

        // setShowDot(false);
      }
    } */

    /* if (node.content!) {
    } */

    if (node.content!.parentSlotId !== "00000000-0000-0000-0000-000000000000") {
      // check
      // console.log("BBBBBBBBBBBBBBBB", node.content!);
    }
    /*  if (node.content!.parentSlotId !== "00000000-0000-0000-0000-000000000000") {
      console.log(
        node.content!,
        "AAAAAAAAAAAAAAAAAAAAAAAAA",

        nodeTree.nodes[node.content!.parentSlotId].content
      );
    } else {
      console.log("BBBBBBBBBBBBBBBB");
    } */
    /*  setShowDot(true); */
    node.content!.constraints.forEach((element) => {
      if (currentConfig.context[element.key]) {
        const tmpArr = currentConfig.context[element.key];
        if (element.value.indexOf(tmpArr) >= 0) {
          tmpItems.push(element);
        }
        /* setShowDot(
          element.value.indexOf(tmpArr) >= 0 &&
            node.content!.constraints.length === tmpItems.length &&
            element.operator !== "Exclude"
        ); */
      } else {
        const tmp = { ...node.content! };
        // eslint-disable-next-line no-param-reassign
        /*  setIsVisible(
          Object.keys(currentConfig.context).length === 0 &&
            currentConfig.context.constructor === Object
        ); */
        /*      node.content!.slots.forEach((elementa: any) => {
          console.log("|||||||||||||||||||||", elementa);
        }); */

        //  console.log(" node.content!.show", node.content!.show);
        // node.content!.show = false;

        /*  Object.keys(currentConfig.context).length === 0 &&
          currentConfig.context.constructor === Object; */
        /*  setShowDot(
          Object.keys(currentConfig.context).length === 0 &&
            currentConfig.context.constructor === Object
        ); */
      }
    });

    //  console.log("NYAAAA", node.content!);
  }, [currentConfig, slotsData, slotsFetching]);

  const setNameEditingMode = useCallback(
    (edit: boolean) => {
      if (isSlotGroup) {
        setNameEditingEnabled(edit);
        nameEditingToggledRef.current = true;
      }
    },
    [isSlotGroup, setNameEditingEnabled]
  );

  useEffect(() => {
    const currentHeight = nodeRef.current!.clientHeight;
    const currentWidth = nodeRef.current!.clientWidth;

    dispatch(
      previewResultActions.setPositionXState({
        nodeWidth: currentWidth,
        isInit: true,
      })
    );

    if (!isHeightValid) {
      updateNodeInfo(node, currentHeight, contentHash);
      resize(currentHeight, true);
    }

    if (!node.content!.name && !nameEditingToggledRef.current) {
      setNameEditingMode(true);
    }
  });

  return (
    <div
      role="row"
      ref={nodeRef}
      style={{ ...slotPosition, ...elementVisibility }}
    >
      {/*    <h1>{JSON.stringify(showDot)}</h1> */}
      <NodeRow
        node={node}
        depth={depth}
        isNodeGroup={isSlotGroup}
        disableActions={isLoading || isLocked}
      >
        <NodeSelectionHandler node={node}>
          <div className={css(styles.cell, styles.node)}>
            <NodeHeaderGap depth={depth} />
            {isSlotGroup && (
              <NodeHeaderToggle
                node={node}
                toggleNodeOpenState={toggleNodeOpenState}
                isOpen={isOpen}
                setOpen={setOpen}
                disable={isLoading}
              />
            )}
            <NodeInput
              nodeDepth={depth}
              isSlotGroup={isSlotGroup}
              value={slotName}
              slot={node.content!}
              enableEditing={nameEditingEnabled}
              setEditMode={setNameEditingMode}
            />
          </div>
          <div className={css(styles.constraints)}>
            <NodeConstraints
              show={showDot}
              constraints={node.content!.constraints}
              constraintValuesMapping={constraintValuesMapping}
            />
          </div>
        </NodeSelectionHandler>
      </NodeRow>
    </div>
  );
}

export default ConstraintSlotNode;
